Docker — інструментарій для управління ізольованими Linux-контейнерами. Docker доповнює інструментарій LXC більш високорівневим API, що дозволяє керувати контейнерами на рівні ізоляції окремих процесів. Зокрема, Docker дозволяє не переймаючись вмістом контейнера запускати довільні процеси в режимі ізоляції і потім переносити і клонувати сформовані для даних процесів контейнери на інші сервери, беручи на себе всю роботу зі створення, обслуговування і підтримки контейнерів.
Сирцевий код Docker написаний мовою Go і поширюється під ліцензією Apache 2.0. Інструментарій базується на застосуванні вбудованих в ядро Linux штатних механізмів ізоляції на основі просторів імен (namespaces) і груп управління (cgroups). Для створення контейнерів використовуються скрипти lxc. Для формування контейнера досить завантажити базовий образ оточення (команда docker pull base), після чого можна запускати в ізольованих оточеннях довільні програми (наприклад, для запуску bash можна виконати docker run -i -t base/bin/bash).
Зміст
1	Основні можливості
1.1	Інтеграція
2	Елементи Docker
3	Docker Hub
4	Відзнаки
5	Виноски
6	Посилання
Основні можливості
Основні можливості Docker:
Можливість розміщення в ізольованому оточенні різнорідної начинки, що включає різні комбінації виконуваних файлів, бібліотек, файлів конфігурації, скриптів, файлів jar, gem, tar тощо
Підтримка роботи на будь-якому комп'ютері на базі архітектури x86_64 з системою на базі ядра Linux, починаючи від ноутбуків, закінчуючи серверами та віртуальними машинами. Можливість роботи поверх немодифікованих сучасних ядер Linux (без накладення патчів) і в штатних оточеннях всіх великих дистрибутивів Linux, включаючи Fedora, RHEL, Ubuntu, Debian, SUSE, Gentoo і Arch;
Використання легковагих контейнерів для ізоляції процесів від інших процесів і основної системи.
Оскільки контейнери використовують свою власну самодостатню файлову систему, не важливо де, коли і в якому оточенні вони запускаються.
Ізоляція на рівні файлової системи: кожен процес виконується у повністю окремій кореневій ФС;
Ізоляція ресурсів: споживання системних ресурсів, таких як витрата пам'яті і навантаження на CPU, можуть обмежуватися окремо для кожного контейнера з використанням cgroups;
Ізоляція на рівні мережі: кожен ізольований процес має доступ тільки до пов'язаного з контейнером мережевого простору імен, включаючи віртуальний мережевий інтерфейс і прив'язані до нього IP-адреси;
Коренева файлова система для контейнерів створюється з використанням механізму copy-on-write[en] (окремо зберігаються тільки змінені і нові дані), що дозволяє прискорити розгортання, знижує витрату пам'яті і економить дисковий простір;
Всі стандартні потоки (stdout/stderr) кожного виконуваного в контейнері процесу накопичуються і зберігаються у вигляді логу;
Змінена файлова система одного контейнера може використовуватися як основа для формування нових базових образів і створення інших контейнерів, без необхідності оформлення шаблонів або ручного налаштування складу образів;
Можливість використання інтерактивної командної оболонки: до стандартного вводу будь-якого контейнера може бути прив'язаний псевдо-tty для запуску shell.
Підтримка використання різних систем зберігання, які можуть підключатися як плаґіни. Серед підтримуваних драйверів зберігання заявлені aufs[en], device mapper[en] (використовуються снапшоти LVM), vfs (на основі копіювання директорій) і Btrfs. Очікується поява драйверів для ZFS, Gluster і Ceph;
Можливість створення контейнерів, що містять складні програмні стеки, через зв'язування між собою вже існуючих контейнерів, що містять складові частини формованого стека. Зв'язування здійснюється не через злиття вмісту, а через забезпечення взаємодії між контейнерами (створюється мережевий тунель).
Docker складається з двох процесів:
Демона Docker, який запускається на гостьовій машині (якщо це Лінукс), або всередині VirtualBox середовища boot2docker (якщо це Windows або OS X).
Клієнта, через який можна взаємодіяти з демоном.
Образ Docker (англ. Docker image) - містить операційну систему, застосунок і всі його залежності. Образи в Docker складаються з шарів. Якщо нам треба образ з веб-сервером, то ми беремо за основу образ з дистрибутивом операційної системи, додаємо залежність - веб-сервер, і записуємо це як новий образ, який матиме два шари - один з ОС, наступний з веб-сервером. Образами можна обмінюватись через DockerHub.
Контейнер Docker - це запущений образ. Контейнери Docker можна запускати, спиняти, переміщувати і видаляти. Також можна зробити docker commit контейнера, що створить образ з поточного стану контейнера.[2]
DockerHub
Разом з першою стабільною версією, що вийшла 13 березня 2013, була представлена[3] ​​нова відкрита платформа для поширення застосунків. Таким чином, Docker виступає в ролі платформи, до складу якої входять: рушій Docker Engine, runtime для контейнерів, інструментарій для створення пакунків, API і хмарний сервіс Docker Hub. Крім того, введено в дію офіційні репозиторії застосунків, з яких можна завантажити готові образи оточень для запуску популярних застосунків, таких як NodeJS, MongoDB, MySQL, Nginx, Redis і WordPress.
Docker Hub являє собою хмарний сервіс для організації спільної роботи, автоматизації робочого процесу, створення, поширення і запуску адаптованих для Docker застосунків. По суті Docker Hub надає набір сервісів, таких як поширення образу контейнера, управління змінами, організація взаємодії між користувачами і розробниками, супровід життєвого циклу, інтеграція зі сторонніми службами. Модель монетизації сервісу Docker Hub аналогічна GitHub — робота над публічними проектами безкоштовна і лише при необхідності використання приватних репозиторіїв стягується оплата.
Основні компоненти Docker Hub:
Інтегрована консоль для управління користувачами, групами, контейнерами, репозиторіями і робочими процесами
Реєстр, що надає понад 14 тисяч ізольованих застосунків, які можна використовувати як цеглини для створення власних застосунків
Інструменти для спільної роботи, що дозволяють користувачам обмінюватися своїми застосунками через публічні та приватні репозиторії, і запрошувати інших людей взяти участь в розробці
Автоматизований складальний сервіс, що дозволяє забезпечити автоматичне перескладання та оновлення застосунків для підтримки образів в актуальному вигляді. Можна організувати оновлення образу після появи змін коду програми в GitHub або Bitbucket
Сервіс Webhooks, що дозволяє користувачеві забезпечити управління з сторонніх систем і автоматизувати виконання типових робіт через RESTful API
Docker Hub API, що включає сервіс автентифікації і засоби інтеграції з зовнішніми службами.